currying 和偏函数应用是利用其他函数进行固化左边的位置函数，进行每一次
调用右边的函数，这个函数类似固定在某个地方，然后进行每一次的调用运行
同时可以把这种方法赋值给其他变量引用，进行无数次的固化引用调用，并且在
进行调用左边的函数的时候，需要固定住右边的参数，以防发生错误，固化函数会
误以为的颠倒，进行错误的运行，而发生错误，偏函数在进行固化的时候
在被固化了后，每次就不需要重复的创建函数，使用变量调用，而是之间使用被赋值的
固化函数进行调用赋值，然后直接返回运算出来的固化函数，类似gui的列子，就是
一种，创建出一个固化函数，然后进行每一次的引用不需要重新创建，如果你需要很多
类似的框架，或者部件，那么偏函数很合适，至于偏函数和闭包之间的区别，区别在于
闭包类似内部循环产生自己的闭包领域，不存在模块命名空间当中，闭包可以应用
全局变量，但是内部的闭包只能引用内部闭包的变量，进行自我引用运行，而偏函数
的概念是替换掉不同的轮子，进行每一次的引用，能够快速返回，并且赋值的值也是不一样
的相当于有了一个工具这个工具能够重复引用，而闭包也是类似，只不过两者有点区别
区别不大，偏函数是利用函数进行重复调用，输入，输出不同的值，而闭包，是自我
内部循环引用，偏函数，在你输入不同的值，同时他也返回不同的值，闭包，在你输入
一个值，在每一次调用，它都可以返回不同的值，同时，你也可以值选择调用一次的值
或者无数次，
迭代器当中存在next函数进行每一次的迭代，当不存在值的时候，将会返回错误信息
但是在迭代器和for循环当中被覆盖了，迭代器是直接每一次取一个next的值，不像列表
每次读取一个值进行反馈，迭代器是每迭代一个对象，就会返回下一个对象，同时取消
之前的对象，而列表类的迭代。每一次读取都是读取实实在在的值，并不会消失，
如果数据庞大的话，它会计算每一个值是否存在其中然后在读取，读取完后，其中的
值还是存在，然后进行下一个的值读取，也相当于把之前的值送回去了，而迭代器
只完成两种操作，是否可迭代，然后进行依次返回序列里面的值，不会进行其他操作
反馈出最后的被处理的错误异常，然后退出
生成器，是用于在处理庞大数据的时候进行吊起的一个值，里面有send next close方法
进送数据和读取数据，和关闭数据，你可以进行送数据进入每一次调用next方法开始叠加
或者最后进行关闭，在生成器当中，生成器可以当做一个悬吊在程序当中的一类东西
这类东西完全听从你的指挥，是否进行送值，是否进行调用下一个值，是否关闭，
这些方法都在生成器当中，生成器能用在任何地方甚至闭包当中，一个闭包循环
只能用其中函数的变量值，这是因为作用域的问题，在生成器当中，如果你执行
了这个函数，那么进行实例化这个函数，也就是传入一个值，把这个函数，赋值
给一个另一个函数的引用，那么这个函数就能进行调用内部的生成器方法，而不是
进行重新赋值，重新运行，而是在原来的地方，继续执行，并且因为存在函数的调用
方法，这样可以无限次数进行引用，而且不会存在其他差错，最后可以进关闭，
生成器的方法，可以进行不同表达式的替换，从而进行运行不同的数据，
